
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c4d  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f2  00000000  00000000  00000ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048b  00000000  00000000  000017cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d0  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002491  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	39 d0       	rcall	.+114    	; 0x126 <main>
  b4:	4a c0       	rjmp	.+148    	; 0x14a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <delay_ms>:
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	5c f0       	brlt	.+22     	; 0xd4 <delay_ms+0x1c>
  be:	08 95       	ret
  c0:	00 00       	nop
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	31 09       	sbc	r19, r1
  c6:	e1 f7       	brne	.-8      	; 0xc0 <delay_ms+0x8>
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	5f 4f       	sbci	r21, 0xFF	; 255
  cc:	84 17       	cp	r24, r20
  ce:	95 07       	cpc	r25, r21
  d0:	19 f4       	brne	.+6      	; 0xd8 <delay_ms+0x20>
  d2:	08 95       	ret
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	27 e0       	ldi	r18, 0x07	; 7
  da:	33 e0       	ldi	r19, 0x03	; 3
  dc:	f1 cf       	rjmp	.-30     	; 0xc0 <delay_ms+0x8>

000000de <LCD_WriteCommand>:
  de:	5e 98       	cbi	0x0b, 6	; 11
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	5f 9a       	sbi	0x0b, 7	; 11
  e4:	00 00       	nop
  e6:	5f 98       	cbi	0x0b, 7	; 11
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	e5 cf       	rjmp	.-54     	; 0xb8 <delay_ms>
  ee:	08 95       	ret

000000f0 <LCD_ClearScreen>:
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	f5 cf       	rjmp	.-22     	; 0xde <LCD_WriteCommand>
  f4:	08 95       	ret

000000f6 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	de df       	rcall	.-68     	; 0xb8 <delay_ms>
	LCD_WriteCommand(0x38);
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	ef df       	rcall	.-34     	; 0xde <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	ed df       	rcall	.-38     	; 0xde <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	eb df       	rcall	.-42     	; 0xde <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	e9 df       	rcall	.-46     	; 0xde <LCD_WriteCommand>
	delay_ms(10);						 
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	d3 cf       	rjmp	.-90     	; 0xb8 <delay_ms>
 112:	08 95       	ret

00000114 <LCD_WriteData>:
 114:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 116:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 118:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 11a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 11c:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ca cf       	rjmp	.-108    	; 0xb8 <delay_ms>
 124:	08 95       	ret

00000126 <main>:
		LCD_WriteData(__cgram[__i]);
}

int main(void)
{
    DDRA = 0x00; PORTA = 0xFF;
 126:	11 b8       	out	0x01, r1	; 1
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00;
 12c:	84 b9       	out	0x04, r24	; 4
 12e:	15 b8       	out	0x05, r1	; 5
    DDRC = 0xFF; PORTC = 0x00;
 130:	87 b9       	out	0x07, r24	; 7
 132:	18 b8       	out	0x08, r1	; 8
    DDRD = 0xFF; PORTD = 0x00;
 134:	8a b9       	out	0x0a, r24	; 10
 136:	1b b8       	out	0x0b, r1	; 11
    LCD_init();
 138:	de df       	rcall	.-68     	; 0xf6 <LCD_init>
    LCD_ClearScreen();
 13a:	da df       	rcall	.-76     	; 0xf0 <LCD_ClearScreen>
 13c:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		uint8_t i;
		for (i = 0; i <= 7; ++i) {
			LCD_WriteData(i);
 13e:	8c 2f       	mov	r24, r28
 140:	e9 df       	rcall	.-46     	; 0x114 <LCD_WriteData>
 142:	cf 5f       	subi	r28, 0xFF	; 255
    LCD_init();
    LCD_ClearScreen();
    while (1) 
    {
		uint8_t i;
		for (i = 0; i <= 7; ++i) {
 144:	c8 30       	cpi	r28, 0x08	; 8
 146:	d9 f7       	brne	.-10     	; 0x13e <main+0x18>
 148:	f9 cf       	rjmp	.-14     	; 0x13c <main+0x16>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
