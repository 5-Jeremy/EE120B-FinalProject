
NokiaTestbench.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fa  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4a  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059e  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000559  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 3f       	cpi	r26, 0xFA	; 250
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	75 c0       	rjmp	.+234    	; 0x196 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

#define F_CPU 8000000

int main(void)
{
    nokia_lcd_init();
  ae:	25 d0       	rcall	.+74     	; 0xfa <nokia_lcd_init>
	nokia_lcd_power(1);
  b0:	81 e0       	ldi	r24, 0x01	; 1
	nokia_lcd_clear();
  b2:	6a d0       	rcall	.+212    	; 0x188 <nokia_lcd_power>
  b4:	58 d0       	rcall	.+176    	; 0x166 <nokia_lcd_clear>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x8>

000000b8 <write>:
 */
static void write(uint8_t bytes, uint8_t is_data)
{
	register uint8_t i;
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
  b8:	29 98       	cbi	0x05, 1	; 5

	/* We are sending data */
	if (is_data)
  ba:	66 23       	and	r22, r22
  bc:	11 f0       	breq	.+4      	; 0xc2 <write+0xa>
		PORT_LCD |= (1 << LCD_DC);
  be:	2b 9a       	sbi	0x05, 3	; 5
  c0:	15 c0       	rjmp	.+42     	; 0xec <write+0x34>
	/* We are sending commands */
	else
		PORT_LCD &= ~(1 << LCD_DC);
  c2:	2b 98       	cbi	0x05, 3	; 5
  c4:	13 c0       	rjmp	.+38     	; 0xec <write+0x34>

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
  c6:	ac 01       	movw	r20, r24
  c8:	02 2e       	mov	r0, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <write+0x18>
  cc:	55 95       	asr	r21
  ce:	47 95       	ror	r20
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <write+0x14>
  d4:	40 ff       	sbrs	r20, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <write+0x24>
			PORT_LCD |= (1 << LCD_DIN);
  d8:	2c 9a       	sbi	0x05, 4	; 5
  da:	01 c0       	rjmp	.+2      	; 0xde <write+0x26>
		else
			PORT_LCD &= ~(1 << LCD_DIN);
  dc:	2c 98       	cbi	0x05, 4	; 5

		/* Blink clock */
		PORT_LCD |= (1 << LCD_CLK);
  de:	2d 9a       	sbi	0x05, 5	; 5
		PORT_LCD &= ~(1 << LCD_CLK);
  e0:	2d 98       	cbi	0x05, 5	; 5
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	78 f7       	brcc	.-34     	; 0xc6 <write+0xe>
	}

	/* Disable controller */
	PORT_LCD |= (1 << LCD_SCE);
  e8:	29 9a       	sbi	0x05, 1	; 5
}
  ea:	08 95       	ret
 * Sending data to LCD
 * @bytes: data
 * @is_data: transfer mode: 1 - data; 0 - command;
 */
static void write(uint8_t bytes, uint8_t is_data)
{
  ec:	27 e0       	ldi	r18, 0x07	; 7
  ee:	30 e0       	ldi	r19, 0x00	; 0
		PORT_LCD &= ~(1 << LCD_DC);

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	e9 cf       	rjmp	.-46     	; 0xc6 <write+0xe>

000000f4 <write_cmd>:
	PORT_LCD |= (1 << LCD_SCE);
}

static void write_cmd(uint8_t cmd)
{
	write(cmd, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	e0 cf       	rjmp	.-64     	; 0xb8 <write>
  f8:	08 95       	ret

000000fa <nokia_lcd_init>:
/*
 * Public functions
 */

void nokia_lcd_init(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	register unsigned i;
	/* Set pins as output */
	DDR_LCD |= (1 << LCD_SCE);
  fe:	21 9a       	sbi	0x04, 1	; 4
	DDR_LCD |= (1 << LCD_RST);
 100:	22 9a       	sbi	0x04, 2	; 4
	DDR_LCD |= (1 << LCD_DC);
 102:	23 9a       	sbi	0x04, 3	; 4
	DDR_LCD |= (1 << LCD_DIN);
 104:	24 9a       	sbi	0x04, 4	; 4
	DDR_LCD |= (1 << LCD_CLK);
 106:	25 9a       	sbi	0x04, 5	; 4

	/* Reset display */
	PORT_LCD |= (1 << LCD_RST);
 108:	2a 9a       	sbi	0x05, 2	; 5
	PORT_LCD |= (1 << LCD_SCE);
 10a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <nokia_lcd_init+0x16>
 114:	00 c0       	rjmp	.+0      	; 0x116 <nokia_lcd_init+0x1c>
 116:	00 00       	nop
	_delay_ms(10);
	PORT_LCD &= ~(1 << LCD_RST);
 118:	2a 98       	cbi	0x05, 2	; 5
 11a:	8b e5       	ldi	r24, 0x5B	; 91
 11c:	94 e4       	ldi	r25, 0x44	; 68
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <nokia_lcd_init+0x24>
 122:	00 c0       	rjmp	.+0      	; 0x124 <nokia_lcd_init+0x2a>
 124:	00 00       	nop
	_delay_ms(70);
	PORT_LCD |= (1 << LCD_RST);
 126:	2a 9a       	sbi	0x05, 2	; 5

	/*
	 * Initialize display
	 */
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 128:	29 98       	cbi	0x05, 1	; 5
	/* -LCD Extended Commands mode- */
	write_cmd(0x21);
 12a:	81 e2       	ldi	r24, 0x21	; 33
 12c:	e3 df       	rcall	.-58     	; 0xf4 <write_cmd>
	/* LCD bias mode 1:48 */
	write_cmd(0x13);
 12e:	83 e1       	ldi	r24, 0x13	; 19
 130:	e1 df       	rcall	.-62     	; 0xf4 <write_cmd>
	/* Set temperature coefficient */
	write_cmd(0x06);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	df df       	rcall	.-66     	; 0xf4 <write_cmd>
	/* Default VOP (3.06 + 66 * 0.06 = 7V) */
	write_cmd(0xC2);
 136:	82 ec       	ldi	r24, 0xC2	; 194
 138:	dd df       	rcall	.-70     	; 0xf4 <write_cmd>
	/* Standard Commands mode, powered down */
	write_cmd(0x20);
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	db df       	rcall	.-74     	; 0xf4 <write_cmd>
	/* LCD in normal mode */
	write_cmd(0x09);
 13e:	89 e0       	ldi	r24, 0x09	; 9
 140:	d9 df       	rcall	.-78     	; 0xf4 <write_cmd>

	/* Clear LCD RAM */
	write_cmd(0x80);
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	d7 df       	rcall	.-82     	; 0xf4 <write_cmd>
	write_cmd(LCD_CONTRAST);
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	d5 df       	rcall	.-86     	; 0xf4 <write_cmd>
 14a:	c8 ef       	ldi	r28, 0xF8	; 248
 14c:	d1 e0       	ldi	r29, 0x01	; 1
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	b2 df       	rcall	.-156    	; 0xb8 <write>
 154:	21 97       	sbiw	r28, 0x01	; 1
	write_cmd(0x09);

	/* Clear LCD RAM */
	write_cmd(0x80);
	write_cmd(LCD_CONTRAST);
	for (i = 0; i < 504; i++)
 156:	d9 f7       	brne	.-10     	; 0x14e <nokia_lcd_init+0x54>
		write_data(0x00);

	/* Activate LCD */
	write_cmd(0x08);
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	cc df       	rcall	.-104    	; 0xf4 <write_cmd>
 15c:	8c e0       	ldi	r24, 0x0C	; 12
	write_cmd(0x0C);
 15e:	ca df       	rcall	.-108    	; 0xf4 <write_cmd>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
}
 164:	08 95       	ret

00000166 <nokia_lcd_clear>:
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	c5 df       	rcall	.-118    	; 0xf4 <write_cmd>
void nokia_lcd_clear(void)
{
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	c3 df       	rcall	.-122    	; 0xf4 <write_cmd>
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
 16e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <__DATA_REGION_ORIGIN__+0x1f8>
	nokia_lcd.cursor_y = 0;
 172:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <__DATA_REGION_ORIGIN__+0x1f9>
 176:	e0 e0       	ldi	r30, 0x00	; 0
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	88 ef       	ldi	r24, 0xF8	; 248
 17c:	92 e0       	ldi	r25, 0x02	; 2
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
		nokia_lcd.screen[i] = 0x00;
 17e:	11 92       	st	Z+, r1
	write_cmd(0x40);
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
	nokia_lcd.cursor_y = 0;
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
 180:	e8 17       	cp	r30, r24
 182:	f9 07       	cpc	r31, r25
 184:	e1 f7       	brne	.-8      	; 0x17e <nokia_lcd_clear+0x18>
		nokia_lcd.screen[i] = 0x00;
}
 186:	08 95       	ret

00000188 <nokia_lcd_power>:

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 188:	81 11       	cpse	r24, r1
 18a:	02 c0       	rjmp	.+4      	; 0x190 <nokia_lcd_power+0x8>
 18c:	84 e2       	ldi	r24, 0x24	; 36
 18e:	01 c0       	rjmp	.+2      	; 0x192 <nokia_lcd_power+0xa>
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	b0 cf       	rjmp	.-160    	; 0xf4 <write_cmd>
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
